
    处理函数的功能和使用
    我们之前学习的转换算子，一般只是针对某种具体操作来定义的，能够拿到的信息比较有限。如果我们想要访问事件的时间戳，或者当前的水位线信息，都是完全做不到的。
    跟时间相关的操作，目前我们只会用窗口来处理。而在很多应用需求中，要求我们对时间有更精细的控制，需要能够获取水位线，甚至要“把控时间”、定义什么时候做什么事，这就不是基本的时间窗口能够实现的了。
    这时就需要使用底层的处理函数。处理函数提供了一个“定时服务”（TimerService），我们可以通过它访问流中的事件（event）、时间戳（timestamp）、水位线（watermark），
    甚至可以注册“定时事件”。而且处理函数继承了AbstractRichFunction抽象类，所以拥有富函数类的所有特性，同样可以访问状态（state）和其他运行时信息。
    此外，处理函数还可以直接将数据输出到侧输出流（side output）中。所以，处理函数是最为灵活的处理方法，可以实现各种自定义的业务逻辑。
    处理函数的使用与基本的转换操作类似，只需要直接基于DataStream调用.process()方法就可以了。方法需要传入一个ProcessFunction作为参数，用来定义处理逻辑。
    stream.process(new MyProcessFunction())
    这里ProcessFunction不是接口，而是一个抽象类，继承了AbstractRichFunction；MyProcessFunction是它的一个具体实现。所以所有的处理函数，
    都是富函数（RichFunction），富函数可以调用的东西这里同样都可以调用。

    ProcessFunction解析
    在源码中我们可以看到，抽象类ProcessFunction继承了AbstractRichFunction，有两个泛型类型参数：I表示Input，也就是输入的数据类型；O表示Output，也就是处理完成之后输出的数据类型。
    内部单独定义了两个方法：一个是必须要实现的抽象方法.processElement()；另一个是非抽象方法.onTimer()。
    public abstract class ProcessFunction<I, O> extends AbstractRichFunction {

        ...
        public abstract void processElement(I value, Context ctx, Collector<O> out) throws Exception;

        public void onTimer(long timestamp, OnTimerContext ctx, Collector<O> out) throws Exception {}
        ...

    }
    1）抽象方法.processElement()
    用于“处理元素”，定义了处理的核心逻辑。这个方法对于流中的每个元素都会调用一次，参数包括三个：输入数据值value，上下文ctx，以及“收集器”（Collector）out。
    方法没有返回值，处理之后的输出数据是通过收集器out来定义的。
    value：当前流中的输入元素，也就是正在处理的数据，类型与流中数据类型一致。
    ctx：类型是ProcessFunction中定义的内部抽象类Context，表示当前运行的上下文，可以获取到当前的时间戳，
    并提供了用于查询时间和注册定时器的“定时服务”（TimerService），以及可以将数据发送到“侧输出流”（side output）的方法.output()。
    out：“收集器”（类型为Collector），用于返回输出数据。使用方式与flatMap算子中的收集器完全一样，直接调用out.collect()方法就可以向下游发出一个数据。这个方法可以多次调用，也可以不调用。
    通过几个参数的分析不难发现，ProcessFunction可以轻松实现flatMap、map、filter这样的基本转换功能；
    而通过富函数提供的获取上下文方法.getRuntimeContext()，也可以自定义状态（state）进行处理，这也就能实现聚合操作的功能了。
    2）非抽象方法.onTimer()
    这个方法只有在注册好的定时器触发的时候才会调用，而定时器是通过“定时服务”TimerService来注册的。打个比方，注册定时器（timer）就是设了一个闹钟，
    到了设定时间就会响；而.onTimer()中定义的，就是闹钟响的时候要做的事。所以它本质上是一个基于时间的“回调”（callback）方法，通过时间的进展来触发；
    在事件时间语义下就是由水位线（watermark）来触发了。
    定时方法.onTimer()也有三个参数：时间戳（timestamp），上下文（ctx），以及收集器（out）。
    这里的timestamp是指设定好的触发时间，事件时间语义下当然就是水位线了。另外这里同样有上下文和收集器，所以也可以调用定时服务（TimerService），以及任意输出处理之后的数据。
    既然有.onTimer()方法做定时触发，我们用ProcessFunction也可以自定义数据按照时间分组、
    定时触发计算输出结果；这其实就实现了窗口（window）的功能。所以说ProcessFunction其实可以实现一切功能。
    注意：在Flink中，只有“按键分区流”KeyedStream才支持设置定时器的操作。

    Flink提供了8个不同的处理函数：
    （1）ProcessFunction
    最基本的处理函数，基于DataStream直接调用.process()时作为参数传入。
    （2）KeyedProcessFunction
    对流按键分区后的处理函数，基于KeyedStream调用.process()时作为参数传入。要想使用定时器，比如基于KeyedStream。
    （3）ProcessWindowFunction
    开窗之后的处理函数，也是全窗口函数的代表。基于WindowedStream调用.process()时作为参数传入。
    （4）ProcessAllWindowFunction
    同样是开窗之后的处理函数，基于AllWindowedStream调用.process()时作为参数传入。
    （5）CoProcessFunction
    合并（connect）两条流之后的处理函数，基于ConnectedStreams调用.process()时作为参数传入。关于流的连接合并操作，我们会在后续章节详细介绍。
    （6）ProcessJoinFunction
    间隔连接（interval join）两条流之后的处理函数，基于IntervalJoined调用.process()时作为参数传入。
    （7）BroadcastProcessFunction
    广播连接流处理函数，基于BroadcastConnectedStream调用.process()时作为参数传入。这里的“广播连接流”BroadcastConnectedStream，
    是一个未keyBy的普通DataStream与一个广播流（BroadcastStream）做连接（conncet）之后的产物。关于广播流的相关操作，我们会在后续章节详细介绍。
    （8）KeyedBroadcastProcessFunction
    按键分区的广播连接流处理函数，同样是基于BroadcastConnectedStream调用.process()时作为参数传入。与BroadcastProcessFunction不同的是，
    这时的广播连接流，是一个KeyedStream与广播流（BroadcastStream）做连接之后的产物。

    按键分区处理函数（KeyedProcessFunction）
    在上节中提到，只有在KeyedStream中才支持使用TimerService设置定时器的操作。所以一般情况下，我们都是先做了keyBy分区之后，再去定义处理操作；代码中更加常见的处理函数是KeyedProcessFunction。
    7.2.1 定时器（Timer）和定时服务（TimerService）
    在.onTimer()方法中可以实现定时处理的逻辑，而它能触发的前提，就是之前曾经注册过定时器、并且现在已经到了触发时间。注册定时器的功能，是通过上下文中提供的“定时服务”来实现的。
    定时服务与当前运行的环境有关。前面已经介绍过，ProcessFunction的上下文（Context）中提供了.timerService()方法，可以直接返回一个TimerService对象。TimerService是Flink关于时间和定时器的基础服务接口，包含以下六个方法：
    // 获取当前的处理时间
    long currentProcessingTime();

    // 获取当前的水位线（事件时间）
    long currentWatermark();

    // 注册处理时间定时器，当处理时间超过time时触发
    void registerProcessingTimeTimer(long time);

    // 注册事件时间定时器，当水位线超过time时触发
    void registerEventTimeTimer(long time);

    // 删除触发时间为time的处理时间定时器
    void deleteProcessingTimeTimer(long time);

    // 删除触发时间为time的处理时间定时器
    void deleteEventTimeTimer(long time);
    六个方法可以分成两大类：基于处理时间和基于事件时间。而对应的操作主要有三个：获取当前时间，注册定时器，以及删除定时器。需要注意，尽管处理函数中都可以直接访问TimerService，不过只有基于KeyedStream的处理函数，才能去调用注册和删除定时器的方法；未作按键分区的DataStream不支持定时器操作，只能获取当前时间。
    TimerService会以键（key）和时间戳为标准，对定时器进行去重；也就是说对于每个key和时间戳，最多只有一个定时器，如果注册了多次，onTimer()方法也将只被调用一次

